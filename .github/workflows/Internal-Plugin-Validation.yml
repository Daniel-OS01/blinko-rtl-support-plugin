name: Internal Plugin Validation

on:
  issues:
    types: [opened, labeled]
  workflow_dispatch:
    inputs:
      mode:
        description: 'Mode to run validation: run on this repo (self), validate a repo from an issue (from-issue), or validate a provided repository URL (repository-url)'
        required: true
        type: choice
        options:
          - 'self'
          - 'from-issue'
          - 'repository-url'
        default: 'self'
      issue_number:
        description: 'Issue number to validate (used when mode is from-issue)'
        required: false
        type: string
      repository_url:
        description: 'Repository URL to validate directly (used when mode is repository-url)'
        required: false
        type: string
      validation_type:
        description: 'Type of validation to perform'
        required: true
        type: choice
        options:
          - 'basic-check'
          - 'full-validation'
        default: 'full-validation'

jobs:
  validate-plugin:
    name: Validate Plugin Submission
    runs-on: ubuntu-latest
    if: |
      (github.event_name == 'issues' && github.event.action == 'opened' && contains(github.event.issue.title, '[Plugin Submission]')) ||
      (github.event_name == 'issues' && github.event.action == 'labeled' && github.event.label.name == 'validate') ||
      (github.event_name == 'workflow_dispatch')
    permissions:
      contents: read
      issues: write
      actions: read
    env:
      GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install jq for JSON validation
        run: sudo apt-get update && sudo apt-get install -y jq

      - name: Ensure gh CLI is available
        run: |
          if ! command -v gh >/dev/null 2>&1; then
            echo "gh CLI not found, attempting to install..."
            sudo apt-get update
            sudo apt-get install -y gh || true
          fi
          gh --version || true

      - name: Extract Repository Information
        id: extract-repo
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          set -euo pipefail
          REPO_URL=""
          ISSUE_NUMBER=""

          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            if [ "${{ inputs.mode }}" = "self" ]; then
              REPO_URL="https://github.com/${{ github.repository }}"
              ISSUE_NUMBER=""
            elif [ "${{ inputs.mode }}" = "from-issue" ]; then
              if [ -n "${{ inputs.issue_number }}" ]; then
                ISSUE_BODY=$(gh issue view "${{ inputs.issue_number }}" --json body -q .body)
                REPO_URL=$(echo "$ISSUE_BODY" | grep -o 'https://github.com/[a-zA-Z0-9_.-]*/[a-zA-Z0-9_.-]*' | head -1 || true)
                ISSUE_NUMBER="${{ inputs.issue_number }}"
              else
                echo "Error: inputs.mode is 'from-issue' but no issue_number provided"
                exit 1
              fi
            elif [ "${{ inputs.mode }}" = "repository-url" ]; then
              if [ -n "${{ inputs.repository_url }}" ]; then
                REPO_URL="${{ inputs.repository_url }}"
                ISSUE_NUMBER=""
              else
                echo "Error: inputs.mode is 'repository-url' but no repository_url provided"
                exit 1
              fi
            else
              echo "Error: unknown mode '${{ inputs.mode }}'"
              exit 1
            fi
          else
            if [ "${{ github.event.action }}" = "opened" ]; then
              ISSUE_BODY="${{ github.event.issue.body }}"
            else
              ISSUE_BODY=$(gh issue view "${{ github.event.issue.number }}" --json body -q .body || true)
            fi
            REPO_URL=$(echo "$ISSUE_BODY" | grep -o 'https://github.com/[a-zA-Z0-9_.-]*/[a-zA-Z0-9_.-]*' | head -1 || true)
            ISSUE_NUMBER="${{ github.event.issue.number }}"
          fi

          if [ -z "$REPO_URL" ]; then
            echo "Error: No valid GitHub repository URL found"
            exit 1
          fi

          REPO_OWNER=$(echo "$REPO_URL" | awk -F'/' '{print $(NF-1)}')
          REPO_NAME=$(echo "$REPO_URL" | awk -F'/' '{print $NF}')

          echo "repo_url=$REPO_URL" >> $GITHUB_OUTPUT
          echo "repo_owner=$REPO_OWNER" >> $GITHUB_OUTPUT
          echo "repo_name=$REPO_NAME" >> $GITHUB_OUTPUT
          echo "issue_number=$ISSUE_NUMBER" >> $GITHUB_OUTPUT

      - name: Clone Plugin Repository
        id: clone-repo
        run: |
          set -euo pipefail
          REPO_URL="${{ steps.extract-repo.outputs.repo_url }}"
          REPO_OWNER="${{ steps.extract-repo.outputs.repo_owner }}"
          REPO_NAME="${{ steps.extract-repo.outputs.repo_name }}"

          echo "Cloning repository: $REPO_URL"
          git -c http.extraHeader="AUTHORIZATION: bearer $GH_TOKEN" clone "https://github.com/$REPO_OWNER/$REPO_NAME.git" plugin-repo
          cd plugin-repo
          echo "Repository cloned successfully"
          echo "commit_hash=$(git rev-parse HEAD)" >> $GITHUB_OUTPUT
          echo "latest_tag=$(git describe --tags --abbrev=0 2>/dev/null || echo 'No tags found')" >> $GITHUB_OUTPUT

      - name: Basic Repository Validation
        id: basic-validation
        run: |
          set -euo pipefail
          cd plugin-repo
          VALIDATION_RESULTS=""
          ERROR_COUNT=0
          WARNING_COUNT=0

          echo "=== BASIC REPOSITORY VALIDATION ==="

          echo "✅ Repository is accessible"
          VALIDATION_RESULTS+="\n✅ Repository is accessible"

          # plugin.json check
          if [ -f "plugin.json" ]; then
            echo "✅ plugin.json found"
            VALIDATION_RESULTS+="\n✅ plugin.json found"

            if jq empty plugin.json >/dev/null 2>&1; then
              echo "✅ plugin.json is valid JSON"
              VALIDATION_RESULTS+="\n✅ plugin.json is valid JSON"
            else
              echo "❌ plugin.json is not valid JSON"
              VALIDATION_RESULTS+="\n❌ plugin.json is not valid JSON"
              ERROR_COUNT=$((ERROR_COUNT + 1))
            fi
          else
            echo "❌ plugin.json not found"
            VALIDATION_RESULTS+="\n❌ plugin.json not found"
            ERROR_COUNT=$((ERROR_COUNT + 1))
          fi

          # Case-insensitive README
          if ls | grep -i -q '^readme\(\.md\|\.txt\)\?$'; then
            echo "✅ README file found"
            VALIDATION_RESULTS+="\n✅ README file found"
          else
            echo "⚠️ No README file found"
            VALIDATION_RESULTS+="\n⚠️ No README file found"
            WARNING_COUNT=$((WARNING_COUNT + 1))
          fi

          # Case-insensitive LICENSE
          if ls | grep -i -q '^license\(\.md\|\.txt\)\?$'; then
            echo "✅ LICENSE file found"
            VALIDATION_RESULTS+="\n✅ LICENSE file found"
          else
            echo "⚠️ No LICENSE file found"
            VALIDATION_RESULTS+="\n⚠️ No LICENSE file found"
            WARNING_COUNT=$((WARNING_COUNT + 1))
          fi

          # .gitignore check
          if [ -f ".gitignore" ]; then
            echo "✅ .gitignore file found"
            VALIDATION_RESULTS+="\n✅ .gitignore file found"
          else
            echo "⚠️ .gitignore file not found"
            VALIDATION_RESULTS+="\n⚠️ .gitignore file not found"
            WARNING_COUNT=$((WARNING_COUNT + 1))
          fi

          echo "error_count=$ERROR_COUNT" >> $GITHUB_OUTPUT
          echo "warning_count=$WARNING_COUNT" >> $GITHUB_OUTPUT
          echo "validation_results<<EOF" >> $GITHUB_OUTPUT
          printf "%b\n" "$VALIDATION_RESULTS" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Detailed Plugin Validation
        if: "(github.event_name == 'workflow_dispatch' && inputs.validation_type == 'full-validation') || (github.event_name != 'workflow_dispatch')"
        id: detailed-validation
        run: |
          set -euo pipefail
          cd plugin-repo
          DETAILED_RESULTS=""

          ERROR_COUNT="${{ steps.basic-validation.outputs.error_count }}"
          WARNING_COUNT="${{ steps.basic-validation.outputs.warning_count }}"
          ERROR_COUNT=${ERROR_COUNT:-0}
          WARNING_COUNT=${WARNING_COUNT:-0}

          echo "=== DETAILED PLUGIN VALIDATION ==="

          if [ -f "plugin.json" ] && jq empty plugin.json >/dev/null 2>&1; then
            REQUIRED_FIELDS=("name" "version" "description" "author")
            for field in "${REQUIRED_FIELDS[@]}"; do
              if jq -e ".$field" plugin.json >/dev/null 2>&1; then
                VALUE=$(jq -r ".$field" plugin.json)
                if [ "$VALUE" != "null" ] && [ -n "$VALUE" ]; then
                  echo "✅ Required field '$field' is present and not empty"
                  if [ ${#VALUE} -gt 100 ]; then
                    DISPLAY_VALUE="${VALUE:0:100}..."
                  else
                    DISPLAY_VALUE="$VALUE"
                  fi
                  DETAILED_RESULTS+="\n✅ Required field '$field': $DISPLAY_VALUE"
                else
                  echo "❌ Required field '$field' is empty"
                  DETAILED_RESULTS+="\n❌ Required field '$field' is empty"
                  ERROR_COUNT=$((ERROR_COUNT + 1))
                fi
              else
                echo "❌ Required field '$field' is missing"
                DETAILED_RESULTS+="\n❌ Required field '$field' is missing"
                ERROR_COUNT=$((ERROR_COUNT + 1))
              fi
            done

            VERSION=$(jq -r '.version // empty' plugin.json)
            if [[ $VERSION =~ ^[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
              echo "✅ Version follows semantic versioning"
              DETAILED_RESULTS+="\n✅ Version follows semantic versioning: $VERSION"
            else
              echo "⚠️ Version doesn't follow semantic versioning (x.y.z)"
              DETAILED_RESULTS+="\n⚠️ Version doesn't follow semantic versioning: $VERSION"
              WARNING_COUNT=$((WARNING_COUNT + 1))
            fi

            OPTIONAL_FIELDS=("repository" "homepage" "keywords" "license")
            for field in "${OPTIONAL_FIELDS[@]}"; do
              if jq -e ".$field" plugin.json >/dev/null 2>&1; then
                VALUE=$(jq -r ".$field" plugin.json)
                echo "✅ Optional field '$field' is present"
                DETAILED_RESULTS+="\n✅ Optional field '$field': $VALUE"
              else
                echo "⚠️ Optional field '$field' is missing"
                DETAILED_RESULTS+="\n⚠️ Optional field '$field' is missing"
                WARNING_COUNT=$((WARNING_COUNT + 1))
              fi
            done

            if jq -e '.main' plugin.json >/dev/null 2>&1; then
              MAIN_FILE=$(jq -r '.main' plugin.json)
              if [ -f "$MAIN_FILE" ]; then
                echo "✅ Entry point file exists: $MAIN_FILE"
                DETAILED_RESULTS+="\n✅ Entry point file exists: $MAIN_FILE"
              else
                echo "❌ Entry point file not found: $MAIN_FILE"
                DETAILED_RESULTS+="\n❌ Entry point file not found: $MAIN_FILE"
                ERROR_COUNT=$((ERROR_COUNT + 1))
              fi
            fi
          fi

          PLUGIN_FILES=("main.js" "index.js" "plugin.js" "src/" "lib/")
          FOUND_MAIN=false
          for file in "${PLUGIN_FILES[@]}"; do
            if [ -f "$file" ] || [ -d "$file" ]; then
              echo "✅ Main plugin file/directory found: $file"
              DETAILED_RESULTS+="\n✅ Main plugin file/directory found: $file"
              FOUND_MAIN=true
              break
            fi
          done

          if [ "$FOUND_MAIN" = false ]; then
            echo "⚠️ No main plugin file found (main.js, index.js, plugin.js, src/, lib/)"
            DETAILED_RESULTS+="\n⚠️ No main plugin file found"
            WARNING_COUNT=$((WARNING_COUNT + 1))
          fi

          if [ -d "test" ] || [ -d "tests" ] || [ -d "__tests__" ] || [ -f "test.js" ] || find . -name "*test*" -type f 2>/dev/null | grep -q .; then
            echo "✅ Test files found"
            DETAILED_RESULTS+="\n✅ Test files found"
          else
            echo "⚠️ No test files found"
            DETAILED_RESULTS+="\n⚠️ No test files found"
            WARNING_COUNT=$((WARNING_COUNT + 1))
          fi

          if [ -f "package.json" ]; then
            echo "✅ package.json found"
            DETAILED_RESULTS+="\n✅ package.json found"

            if jq empty package.json >/dev/null 2>&1; then
              echo "✅ package.json is valid JSON"
              DETAILED_RESULTS+="\n✅ package.json is valid JSON"

              if command -v npm >/dev/null 2>&1; then
                echo "Checking for security vulnerabilities..."
                npm install --package-lock-only --silent || true
                if npm audit --audit-level=moderate --silent >/dev/null 2>&1; then
                  echo "✅ No moderate+ security vulnerabilities found"
                  DETAILED_RESULTS+="\n✅ No moderate+ security vulnerabilities found"
                else
                  echo "⚠️ Security vulnerabilities detected in dependencies"
                  DETAILED_RESULTS+="\n⚠️ Security vulnerabilities detected in dependencies"
                  WARNING_COUNT=$((WARNING_COUNT + 1))
                fi
              fi
            else
              echo "❌ package.json is not valid JSON"
              DETAILED_RESULTS+="\n❌ package.json is not valid JSON"
              ERROR_COUNT=$((ERROR_COUNT + 1))
            fi
          fi

          REPO_SIZE=$(du -sh . | cut -f1)
          echo "ℹ️ Repository size: $REPO_SIZE"
          DETAILED_RESULTS+="\nℹ️ Repository size: $REPO_SIZE"

          DOC_FILES=("CHANGELOG.md" "CONTRIBUTING.md" "docs/")
          for file in "${DOC_FILES[@]}"; do
            if [ -f "$file" ] || [ -d "$file" ]; then
              echo "✅ Documentation found: $file"
              DETAILED_RESULTS+="\n✅ Documentation found: $file"
            fi
          done

          echo "detailed_error_count=$ERROR_COUNT" >> $GITHUB_OUTPUT
          echo "detailed_warning_count=$WARNING_COUNT" >> $GITHUB_OUTPUT
          echo "detailed_results<<EOF" >> $GITHUB_OUTPUT
          printf "%b\n" "$DETAILED_RESULTS" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Security and Code Quality Checks
        if: "(github.event_name == 'workflow_dispatch' && inputs.validation_type == 'full-validation') || (github.event_name != 'workflow_dispatch')"
        id: security-checks
        run: |
          set -euo pipefail
          cd plugin-repo
          SECURITY_RESULTS=""

          ERROR_COUNT="${{ steps.detailed-validation.outputs.detailed_error_count }}"
          if [ -z "$ERROR_COUNT" ]; then
            ERROR_COUNT="${{ steps.basic-validation.outputs.error_count }}"
          fi
          ERROR_COUNT=${ERROR_COUNT:-0}

          WARNING_COUNT="${{ steps.detailed-validation.outputs.detailed_warning_count }}"
          if [ -z "$WARNING_COUNT" ]; then
            WARNING_COUNT="${{ steps.basic-validation.outputs.warning_count }}"
          fi
          WARNING_COUNT=${WARNING_COUNT:-0}

          echo "=== SECURITY AND CODE QUALITY CHECKS ==="

          # Sensitive files check (expanded)
          SENSITIVE_FILES=(".env" ".env.local" ".env.production" ".env.development" "config.json" "secrets.json" "private.key" "id_rsa" ".npmrc")
          for file in "${SENSITIVE_FILES[@]}"; do
            if [ -f "$file" ]; then
              echo "⚠️ Sensitive file detected: $file"
              SECURITY_RESULTS+="\n⚠️ Sensitive file detected: $file"
              WARNING_COUNT=$((WARNING_COUNT + 1))
            fi
          done

          # Hardcoded secrets check, skip node_modules and .git
          if grep -r --exclude-dir={node_modules,.git} -E 'password|secret|key|token' ./*.js ./*.ts ./*.json 2>/dev/null | head -5 | grep .; then
            echo "⚠️ Potential hardcoded secrets found"
            SECURITY_RESULTS+="\n⚠️ Potential hardcoded secrets found"
            WARNING_COUNT=$((WARNING_COUNT + 1))
          else
            echo "✅ No obvious hardcoded secrets detected"
            SECURITY_RESULTS+="\n✅ No obvious hardcoded secrets detected"
          fi

          # Error handling patterns
          if find . -name "*.js" -o -name "*.ts" 2>/dev/null | xargs grep -l "try\|catch" | head -1 | grep .; then
            echo "✅ Error handling patterns detected"
            SECURITY_RESULTS+="\n✅ Error handling patterns detected"
          else
            echo "⚠️ No error handling patterns found"
            SECURITY_RESULTS+="\n⚠️ No error handling patterns found"
            WARNING_COUNT=$((WARNING_COUNT + 1))
          fi

          # Minified files detection
          if find . -type f -name "*.min.js" | grep .; then
            echo "⚠️ Minified JavaScript files detected"
            SECURITY_RESULTS+="\n⚠️ Minified JavaScript files detected"
            WARNING_COUNT=$((WARNING_COUNT + 1))
          else
            echo "✅ No minified files detected"
            SECURITY_RESULTS+="\n✅ No minified files detected"
          fi

          echo "security_error_count=$ERROR_COUNT" >> $GITHUB_OUTPUT
          echo "security_warning_count=$WARNING_COUNT" >> $GITHUB_OUTPUT
          echo "security_results<<EOF" >> $GITHUB_OUTPUT
          printf "%b\n" "$SECURITY_RESULTS" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Generate Validation Report
        id: report
        run: |
          set -euo pipefail

          SECURITY_ERRORS="${{ steps.security-checks.outputs.security_error_count }}"
          DETAILED_ERRORS="${{ steps.detailed-validation.outputs.detailed_error_count }}"
          BASIC_ERRORS="${{ steps.basic-validation.outputs.error_count }}"

          SECURITY_WARNINGS="${{ steps.security-checks.outputs.security_warning_count }}"
          DETAILED_WARNINGS="${{ steps.detailed-validation.outputs.detailed_warning_count }}"
          BASIC_WARNINGS="${{ steps.basic-validation.outputs.warning_count }}"

          # Choose the most-complete available values, default to 0 if empty
          if [ -n "$SECURITY_ERRORS" ]; then
            FINAL_ERROR_COUNT=$SECURITY_ERRORS
          elif [ -n "$DETAILED_ERRORS" ]; then
            FINAL_ERROR_COUNT=$DETAILED_ERRORS
          else
            FINAL_ERROR_COUNT=${BASIC_ERRORS:-0}
          fi

          if [ -n "$SECURITY_WARNINGS" ]; then
            FINAL_WARNING_COUNT=$SECURITY_WARNINGS
          elif [ -n "$DETAILED_WARNINGS" ]; then
            FINAL_WARNING_COUNT=$DETAILED_WARNINGS
          else
            FINAL_WARNING_COUNT=${BASIC_WARNINGS:-0}
          fi

          if [ "$FINAL_ERROR_COUNT" -eq 0 ]; then
            OVERALL_STATUS="✅ PASSED"
          else
            OVERALL_STATUS="❌ FAILED"
          fi

          TIMESTAMP=$(date -u +"%Y-%m-%d %H:%M:%S UTC")

          cat > validation_report.md << EOF
# Plugin Validation Report

**Repository:** ${{ steps.extract-repo.outputs.repo_url }}
**Validation Date:** TIMESTAMP_PLACEHOLDER
**Commit Hash:** ${{ steps.clone-repo.outputs.commit_hash }}
**Latest Tag:** ${{ steps.clone-repo.outputs.latest_tag }}

## Summary
- ❌ **Errors:** ERROR_COUNT_PLACEHOLDER
- ⚠️ **Warnings:** WARNING_COUNT_PLACEHOLDER  
- **Overall Status:** OVERALL_STATUS_PLACEHOLDER

## Validation Results

### Basic Validation
${{ steps.basic-validation.outputs.validation_results }}

### Detailed Validation
${{ steps.detailed-validation.outputs.detailed_results }}

### Security and Code Quality
${{ steps.security-checks.outputs.security_results }}

## Recommendations
RECOMMENDATIONS_PLACEHOLDER
EOF

          sed -i "s/TIMESTAMP_PLACEHOLDER/$TIMESTAMP/g" validation_report.md
          sed -i "s/ERROR_COUNT_PLACEHOLDER/$FINAL_ERROR_COUNT/g" validation_report.md
          sed -i "s/WARNING_COUNT_PLACEHOLDER/$FINAL_WARNING_COUNT/g" validation_report.md
          sed -i "s/OVERALL_STATUS_PLACEHOLDER/$OVERALL_STATUS/g" validation_report.md

          RECOMMENDATIONS=""
          if [ "$FINAL_ERROR_COUNT" -gt 0 ]; then
            RECOMMENDATIONS+="- Fix all errors before plugin can be considered ready\n"
          fi
          if [ "$FINAL_WARNING_COUNT" -gt 0 ]; then
            RECOMMENDATIONS+="- Address warnings to improve plugin quality\n"
          fi
          if [ "$FINAL_ERROR_COUNT" -eq 0 ] && [ "$FINAL_WARNING_COUNT" -eq 0 ]; then
            RECOMMENDATIONS+="- Plugin passes all validation checks! 🎉\n"
          fi

          echo -e "$RECOMMENDATIONS" > recommendations.txt
          sed -i '/RECOMMENDATIONS_PLACEHOLDER/r recommendations.txt' validation_report.md
          sed -i '/RECOMMENDATIONS_PLACEHOLDER/d' validation_report.md

          echo "validation_report<<EOF" >> $GITHUB_OUTPUT
          cat validation_report.md >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

          echo "total_errors=$FINAL_ERROR_COUNT" >> $GITHUB_OUTPUT
          echo "total_warnings=$FINAL_WARNING_COUNT" >> $GITHUB_OUTPUT

      - name: Comment Validation Results
        if: steps.extract-repo.outputs.issue_number != ''
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          ISSUE_NUMBER="${{ steps.extract-repo.outputs.issue_number }}"
          VALIDATION_BODY="${{ steps.report.outputs.validation_report }}"
          gh issue comment "$ISSUE_NUMBER" --body "$VALIDATION_BODY"

      - name: Set Validation Labels
        if: steps.extract-repo.outputs.issue_number != '' && github.event_name != 'workflow_dispatch'
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          ISSUE_NUMBER="${{ steps.extract-repo.outputs.issue_number }}"
          LABELS_TO_REMOVE=("validation-passed" "validation-failed" "validation-warnings")
          for lbl in "${LABELS_TO_REMOVE[@]}"; do
            gh issue edit "$ISSUE_NUMBER" --remove-label "$lbl" || true
          done

          TOTAL_ERRORS="${{ steps.report.outputs.total_errors }}"
          TOTAL_WARNINGS="${{ steps.report.outputs.total_warnings }}"

          if [ "$TOTAL_ERRORS" -eq 0 ]; then
            if [ "$TOTAL_WARNINGS" -eq 0 ]; then
              gh issue edit "$ISSUE_NUMBER" --add-label "validation-passed"
            else
              gh issue edit "$ISSUE_NUMBER" --add-label "validation-warnings"
            fi
          else
            gh issue edit "$ISSUE_NUMBER" --add-label "validation-failed"
          fi

      - name: Print Summary
        run: |
          echo "=== VALIDATION SUMMARY ==="
          echo "Repository: ${{ steps.extract-repo.outputs.repo_url }}"
          echo "Errors: ${{ steps.report.outputs.total_errors }}"
          echo "Warnings: ${{ steps.report.outputs.total_warnings }}"
          if [ ${{ steps.report.outputs.total_errors }} -eq 0 ]; then
            echo "Status: PASSED ✅"
          else
            echo "Status: FAILED ❌"
          fi
          echo "========================="
          echo ""
          cat validation_report.md
